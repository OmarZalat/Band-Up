generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BandData {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  bio         String?
  name        String
  tagsId      String
  tag         Tags        @relation(fields: [tagsId], references: [id])
  posts       BandPosts[]
  bandMembers UserData[]
}

model BandPosts {
  id           String         @id @default(cuid())
  image        String?
  content      String?
  createdAt    DateTime       @default(now())
  bandDataId   String?
  type         Type
  BandData     BandData?      @relation(fields: [bandDataId], references: [id])
  Likes        Likes[]
  PostComments PostComments[]
}

model PostComments {
  id          String    @id @default(cuid())
  postID      String
  content     String
  bandPostsId String
  userDataId  String?
  post        BandPosts @relation(fields: [bandPostsId], references: [id])
  UserData    UserData? @relation(fields: [userDataId], references: [id])
}

model UserData {
  id                String         @id @default(cuid())
  FName             String
  LName             String
  username          String?
  image             String?
  email             String         @unique
  emailVerification Boolean
  newsletterMember  Boolean
  password          String
  country           String
  DOB               String
  gender            String
  tags              String[]
  bio               String?
  bandDataId        String?
  role              Role           @default(MEMBER)
  Likes             Likes[]
  comments          PostComments[]
  BandData          BandData?      @relation(fields: [bandDataId], references: [id])
  Session           Session[]
  userDataId        String?
  follower          Friendship[]   @relation("FollowerRelation")
  following         Friendship[]   @relation("FollowingRelation")
}

model Friendship {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Foreign keys
  followerId  String
  followingId String

  // Relationships
  follower  UserData @relation("FollowerRelation", fields: [followerId], references: [id])
  following UserData @relation("FollowingRelation", fields: [followingId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String
  user         UserData @relation(fields: [userDataId], references: [id])
  userDataId   String   @unique
  createdAt    DateTime @default(now())
  expiry       DateTime
}

model Likes {
  id          String    @id @default(cuid())
  bandPostsId String
  userDataId  String
  post        BandPosts @relation(fields: [bandPostsId], references: [id])
  user        UserData  @relation(fields: [userDataId], references: [id])
}

model Tags {
  id       String     @id @default(cuid())
  name     String     @unique
  BandData BandData[]
}

enum Role {
  MEMBER
  PUBLISHER
  LEADER
}

enum Type {
  INDIVIDUAL
  BAND
}
